FROM golang:1.20-alpine AS build

WORKDIR /go/build
RUN apk add --no-cache \
    bash \
    make
COPY . .
RUN make service

FROM alpine:3.22

LABEL org.opencontainers.image.title="dns3ld"
LABEL org.opencontainers.image.description="DNS3L daemon with API for core functionality"
LABEL org.opencontainers.image.version=0.0.0

ENV VERSION=0.0.0

ENV PAGER=less

ARG http_proxy
ARG https_proxy
ARG no_proxy

# provided via BuildKit
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG TARGETVARIANT

# defaults for none BuildKit
ENV _platform=${TARGETPLATFORM:-linux/amd64}
ENV _os=${TARGETOS:-linux}
ENV _arch=${TARGETARCH:-amd64}
ENV _variant=${TARGETVARIANT:-}

ARG DNS3LUID=10045
ARG DNS3LGID=10045

ENV DNS3LPATH=/home/dns3ld

RUN apk --update upgrade && \
    apk add --no-cache \
        ca-certificates curl less bash busybox-extras \
        jq tzdata coreutils openssl \
        mariadb-client libcap \
        certbot && \
    addgroup -g ${DNS3LGID} dns3ld && \
    adduser -D -u ${DNS3LUID} -G dns3ld dns3ld && \
    chmod g-s ${DNS3LPATH} && \
    chown dns3ld:dns3ld ${DNS3LPATH} && \
    rm -rf /var/cache/apk/*

# Install dockerize
#
ENV DCKRZ_VERSION="0.23.1"
RUN curl -fsSL https://github.com/powerman/dockerize/releases/download/v$DCKRZ_VERSION/dockerize-v${DCKRZ_VERSION}-${_os}-${_arch}${_variant} > /dckrz && \
    chmod a+x /dckrz

COPY --from=build /go/build/dns3ld /app/dns3ld
COPY docker/docker-entrypoint.sh /entrypoint.sh
COPY docker/run-dns3ld.sh /run-dns3ld.sh
COPY --chown=dns3ld:dns3ld docker/certbot.conf $DNS3LPATH/certbot.ini

WORKDIR $DNS3LPATH

EXPOSE 8880

ENTRYPOINT ["/entrypoint.sh"]
CMD ["/app/dns3ld", "--socket", ":8880", "--config", "/home/dns3ld/config.yaml"]
